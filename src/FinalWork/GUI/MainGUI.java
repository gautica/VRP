/*
 * RAUS! An der GUI wird noch nicht gearbeitet!
 */
package FinalWork.GUI;

import Logic.Types.Depot;
import Logic.Types.Point;
import Logic.Types.Driver;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

/**
 *
 * @author markus
 */
public class MainGUI extends javax.swing.JFrame {
    /**
     * Creates new form MainGUI
     * @param drivers
     */
    
    public MainGUI(Driver[] drivers) {
        initComponents();
        
        Panel panel = new Panel(drivers);       
        panel.setLayout(new BorderLayout());
        this.setContentPane(panel);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1238, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 934, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private static class Panel extends JPanel {
        private final Driver[] drivers;

        public Panel (Driver[] drivers) {
            this.drivers = drivers;
        }
        
        @Override
        public void paint(Graphics g) {
            // Setting drawing parameters
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(
                    RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setStroke(new BasicStroke(2,
                    BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
            
            // Actual drawing
            for (int i = 0; i < this.drivers.length; i++) {
                g2d.setColor(getColor(i));
                g2d.drawLine((int) (Depot.depot.getX() / 5),
                        (int) (Depot.depot.getY() / 5), 
                        (int) (drivers[i].clientsToServe[0].getX() / 5), 
                        (int) (drivers[i].clientsToServe[0].getY() / 5));
                for (int j = 0; j < drivers[i].clientsToServe.length - 1; j++) {
                    //g2d.setColor(Color.BLACK);
                    g2d.fillOval((int) drivers[i].clientsToServe[j].getX() / 5 - 5, (int) drivers[i].clientsToServe[j].getY() / 5 - 5, 10, 10);
                    g2d.drawString(drivers[i].clientsToServe[j].getID(), (int) drivers[i].clientsToServe[j].getX() / 5 + 4, (int) drivers[i].clientsToServe[j].getY() / 5);
                    //g2d.setColor(getColor(i));
                    g2d.drawLine((int) (drivers[i].clientsToServe[j].getX() / 5),
                                    (int) (drivers[i].clientsToServe[j].getY() / 5),
                                    (int) (drivers[i].clientsToServe[j+1].getX() /5),
                                    (int) (drivers[i].clientsToServe[j+1].getY() /5));
                }
                g2d.fillOval((int) drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getX() / 5 - 5, (int) drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getY() / 5 - 5, 10, 10);
                g2d.drawString(drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getID(),
                        (int) drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getX() / 5 + 4,
                        (int) drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getY() / 5);
                g2d.drawLine((int) (Depot.depot.getX() / 5), 
                            (int) (Depot.depot.getY() / 5), 
                            (int) (drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getX() / 5), 
                            (int) (drivers[i].clientsToServe[drivers[i].clientsToServe.length-1].getY() / 5));
            }
        }
        
    private void drawArrowHead(Graphics2D g2, Point tip, Point tail, Color color)
        {
        g2.setPaint(color);
        double dy = tip.getY() - tail.getY();
        double dx = tip.getX()- tail.getX();
        double theta = Math.atan2(dy, dx);
        //System.out.println("theta = " + Math.toDegrees(theta));
        double x, y, rho = theta + Math.toRadians(40);
        for(int j = 0; j < 2; j++)
        {
            x = tip.getX() - 10 * Math.cos(rho);
            y = tip.getY() - 10 * Math.sin(rho);
            g2.draw(new Line2D.Double(tip.getX(), tip.getY(), x, y));
            rho = theta - Math.toRadians(40);
        }
    }
        private Color getColor(int i) {
            switch(i) {
                case 0:
                    return Color.BLACK;
                case 1:
                    return Color.BLUE;
                case 2:
                    return Color.GREEN;
                case 3:
                    return Color.RED;
                case 4:
                    return Color.ORANGE;
                default:
                    return Color.BLACK;
            }
        }
    }
}
